#!/bin/bash

IDENTITIES=(alice bob lily zach ross)
FLAGS='--networkid=8888 --preload=identities.js'
DEV_FLAGS='--nodiscover --verbosity=4'

BASE_PORT=40300
BASE_RPC_PORT=8100

SCRIPT=$(basename "$0")

USAGE="Name:
    $SCRIPT - Command line utility for creating and running a three node Ethereum private net

    Network comes with three identities at the following addresses:

        alice: 0xdda6ef2ff259928c561b2d30f0cad2c2736ce8b6 (initialized with 1 Ether)
        bob:   0x8691bf25ce4a56b15c1f99c944dc948269031801 (initialized with 1 Ether)
        lily:  0xb1b6a66a410edc72473d92decb3772bad863e243

Usage:
    $SCRIPT command [command options]

Commands:
    init       Initialize private network from genesis block in genesis.json
    clean      Destroy all blockchain history, resetting to pristine state
    start      Start a running ethereum node on the network (example: 'start alice')
    connect    Connect two running nodes as peers (example: 'connect alice bob')
    help       Print this help message

Author:
    Vincent Chu (@vincentchu), Initialized Capital
    https://github.com/vincentchu/eth-private-net
"

# For example, geth --exec "eth.blockNumber" attach prints the current block number of a running geth instance.


function exec_on_node() {
  geth --exec="$2" attach ./$1/geth.ipc
}

CMD=$1
case $CMD in
  init)
    for IDENTITY in ${IDENTITIES[@]}; do
      echo "Initializing genesis block for $IDENTITY"
      geth --datadir=./$IDENTITY $FLAGS init genesis.json
    done
    ;;

  clean)
    for IDENTITY in ${IDENTITIES[@]}; do
      echo "Cleaning geth/ directory from $IDENTITY"
      rm -r ./$IDENTITY/geth
    done
    ;;

  start)
    IDENTITY=$2
    if [ -z $IDENTITY ]
    then
      echo "No identity specified. Identity must be one of: ${IDENTITIES[*]}"
      exit -1
    fi

    case $IDENTITY in
      alice)
        OFFSET=1
        ;;

      bob)
        OFFSET=2
        ;;

      lily)
        OFFSET=3
        ;;

      zach)
        OFFSET=4
        ;;
        
      ross)
        OFFSET=5
        ;;
    esac

    PORT=$((BASE_PORT + OFFSET))
    RPC_PORT=$((BASE_RPC_PORT + OFFSET))

    echo "Starting node for $IDENTITY on port: $PORT, RPC port: $RPC_PORT. Console logs sent to ./$IDENTITY/console.log"
    geth --debug --vmdebug --rpcapi eth,net,web3 --datadir=./$IDENTITY --port=$PORT --rpcaddr --rpcport=$RPC_PORT $FLAGS $DEV_FLAGS console 2>> ./$IDENTITY/console.log
    ;;

  connect)
    IDENTITY1=$2
    IDENTITY2=$3

    ENODE=$(exec_on_node $IDENTITY1 'admin.nodeInfo.enode')
    CONNECT_JS="admin.addPeer($ENODE)"

    exec_on_node $IDENTITY2 $CONNECT_JS
    ;;

  help)
    echo "$USAGE"
    ;;

  connectThree)
    IDENTITY1=$2
    IDENTITY2=$3
    IDENTITY3=$4

    ENODE1=$(exec_on_node $IDENTITY1 'admin.nodeInfo.enode')
    ENODE2=$(exec_on_node $IDENTITY2 'admin.nodeInfo.enode')
    CONNECT_JS1="admin.addPeer($ENODE1)"
    CONNECT_JS2="admin.addPeer($ENODE2)"

    exec_on_node $IDENTITY2 $CONNECT_JS1
    exec_on_node $IDENTITY3 $CONNECT_JS1
    exec_on_node $IDENTITY3 $CONNECT_JS2
    ;;

  runTestScript)
    IDENTITY=$2
    TESTSCRIPT=$3

    exec_on_node $IDENTITY "loadScript('testScripts/$TESTSCRIPT')"
    ;;

  sendTransaction)
    IDENTITY=$2
    RECEIVER=$3

    exec_on_node $IDENTITY "loadScript('testScripts/sendTx.js'); sendTransaction('$IDENTITY', '$RECEIVER')"
    ;;

  forceTimeout)
    IDENTITY=$2
    TIME=$3

    exec_on_node $IDENTITY "loadScript('testScripts/forceTimeout.js'); sleep($TIME)"
    ;;


  connectFive)
    IDENTITY1=$2
    IDENTITY2=$3
    IDENTITY3=$4
    IDENTITY3=$5
    IDENTITY3=$6

    ENODE1=$(exec_on_node $IDENTITY1 'admin.nodeInfo.enode')
    ENODE2=$(exec_on_node $IDENTITY2 'admin.nodeInfo.enode')
    ENODE3=$(exec_on_node $IDENTITY3 'admin.nodeInfo.enode')
    ENODE4=$(exec_on_node $IDENTITY4 'admin.nodeInfo.enode')
    ENODE4=$(exec_on_node $IDENTITY4 'admin.nodeInfo.enode')
    ENODE5=$(exec_on_node $IDENTITY5 'admin.nodeInfo.enode')
    CONNECT_JS1="admin.addPeer($ENODE1)"
    CONNECT_JS2="admin.addPeer($ENODE2)"
    CONNECT_JS3="admin.addPeer($ENODE3)"
    CONNECT_JS4="admin.addPeer($ENODE4)"
    CONNECT_JS5="admin.addPeer($ENODE5)"

    exec_on_node $IDENTITY1 $CONNECT_JS2
    exec_on_node $IDENTITY1 $CONNECT_JS3
    exec_on_node $IDENTITY1 $CONNECT_JS4
    exec_on_node $IDENTITY1 $CONNECT_JS5
    exec_on_node $IDENTITY2 $CONNECT_JS3
    exec_on_node $IDENTITY2 $CONNECT_JS4
    exec_on_node $IDENTITY2 $CONNECT_JS5
    exec_on_node $IDENTITY3 $CONNECT_JS4
    exec_on_node $IDENTITY3 $CONNECT_JS5
    exec_on_node $IDENTITY4 $CONNECT_JS5
    ;;

  startMiner)
    IDENTITY=$2

    exec_on_node $IDENTITY 'miner.start()'
    ;;

  stopMiner)
    IDENTITY=$2

    exec_on_node $IDENTITY 'miner.stop()'
    ;;

  *)
    echo "Command '$CMD' not recognized!"
    echo "$USAGE"
    exit -1
  ;;
esac
